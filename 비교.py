# -*- coding: utf-8 -*-
"""비교.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10WmYn0LfgsyO3fmUfeVFp8m7pEdsfzGf
"""

import pandas as pd

# CSV 파일 불러오기
protein_normal = pd.read_csv("/content/정상_data_단백질2.csv")
protein_tumor = pd.read_csv("/content/환자_data_단백질.csv")

# 비교할 열 목록 (Cancer 열 제외)
compare_cols = ['peptide_target', 'AGID', 'protein_expression']

# 데이터프레임 병합 (how='outer'로 모든 행 포함)
merged_df = pd.merge(protein_normal[compare_cols], protein_tumor[compare_cols],
                     on=compare_cols, how='outer', indicator=True)

# 'both'에 해당하지 않는 행 필터링
different_rows = merged_df[merged_df['_merge'] != 'both'].copy()

# 'Cancer' 열 추가 로직 수정
different_rows['Cancer'] = 0  # 초기값을 0으로 설정 (정상)

# _merge 값에 따라 Cancer 값 변경
different_rows.loc[different_rows['_merge'] == 'right_only', 'Cancer'] = 1  # 암에만 있는 경우

# 필요 없는 _merge 열 제거
different_rows = different_rows.drop('_merge', axis=1)

# 결과 출력
print(different_rows)

# 필요한 경우 결과를 새로운 CSV 파일로 저장
different_rows.to_csv("protein_difference.csv", index=False)

import pandas as pd

def compare_and_extract(tumal_file, normal_file, tumal_only_file, normal_only_file):
    """
    두 개의 텍스트 파일을 비교하여 중복을 제거하고, 각 파일에만 있는 데이터를 추출합니다.

    Args:
        tumal_file: tumal 데이터가 있는 텍스트 파일 경로
        normal_file: normal 데이터가 있는 텍스트 파일 경로
        tumal_only_file: tumal에만 있는 데이터를 저장할 텍스트 파일 경로
        normal_only_file: normal에만 있는 데이터를 저장할 텍스트 파일 경로
    """

    try:
        # 텍스트 파일 읽기 (sep='\t'로 탭 구분자 지정,  header=0 첫 행을 헤더로)
        df_tumal = pd.read_csv(tumal_file, sep='\t', header=0, encoding='utf-8')
        df_normal = pd.read_csv(normal_file, sep='\t', header=0, encoding='utf-8')
    except FileNotFoundError:
        print("Error: 파일을 찾을 수 없습니다. 파일 경로를 확인해주세요.")
        return
    except pd.errors.ParserError:
        print("Error: CSV 파싱 오류. 파일 인코딩 또는 구분자를 확인해주세요 (예: utf-8, cp949, euc-kr, sep='\\t').")
        return
    except Exception as e:
        print(f"Error: {e}")
        return

    # 비교할 열 목록 (DataFrame에 존재하는 열 이름인지 확인)
    columns_to_compare = ['AGID',	'lab_id',	'catalog_number',	'set_id',	'peptide_target',	'protein_expression']
    if not all(col in df_tumal.columns and col in df_normal.columns for col in columns_to_compare):
        print("Error: 비교할 열이 DataFrame에 존재하지 않습니다.")
        return

    # 중복 검사를 위한 임시 열 생성
    df_tumal['merge_key'] = df_tumal[columns_to_compare].astype(str).agg(''.join, axis=1)
    df_normal['merge_key'] = df_normal[columns_to_compare].astype(str).agg(''.join, axis=1)

    # 각 파일에만 있는 데이터 찾기
    merged = df_tumal.merge(df_normal, on='merge_key', how='outer', indicator=True)

    # tumal에만 있는 데이터
    tumal_only = merged[merged['_merge'] == 'left_only'].copy()
    # normal에만 있는 데이터
    normal_only = merged[merged['_merge'] == 'right_only'].copy()

    # merge_key 열과 _merge 열 제거
    tumal_only = tumal_only.drop(columns=['merge_key', '_merge'])
    normal_only = normal_only.drop(columns=['merge_key', '_merge'])

    # 결과를 텍스트 파일로 저장 (sep='\t'로 탭 구분자 지정)
    tumal_only.to_csv(tumal_only_file, sep='\t', index=False, encoding='utf-8')
    normal_only.to_csv(normal_only_file, sep='\t', index=False, encoding='utf-8')

    print(f"tumal에만 있는 데이터: {len(tumal_only)} 건 -> {tumal_only_file}에 저장됨")
    print(f"normal에만 있는 데이터: {len(normal_only)} 건 -> {normal_only_file}에 저장됨")


# 함수 사용 예시
tumal_file = 'cnv(tumal).txt'
normal_file = 'cnv(normal).txt'
tumal_only_file = 'cnv(tumal_only).txt'
normal_only_file = 'cnv(normal_only).txt'

compare_and_extract(tumal_file, normal_file, tumal_only_file, normal_only_file)

